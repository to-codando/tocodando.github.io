{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/@esm-bundle+chai@4.3.4-fix.0/node_modules/@esm-bundle/chai/node_modules/.pnpm/chai@4.3.4/node_modules/chai/chai.js", "../../node_modules/.pnpm/@esm-bundle+chai@4.3.4-fix.0/node_modules/@esm-bundle/chai/input.js", "../../src/tests/SampleTest.spec.ts"],
  "sourcesContent": ["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.chai = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nmodule.exports = require('./lib/chai');\n\n},{\"./lib/chai\":2}],2:[function(require,module,exports){\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.3.3';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n\n},{\"./chai/assertion\":3,\"./chai/config\":4,\"./chai/core/assertions\":5,\"./chai/interface/assert\":6,\"./chai/interface/expect\":7,\"./chai/interface/should\":8,\"./chai/utils\":23,\"assertion-error\":34}],3:[function(require,module,exports){\n/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      };\n\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n\n},{\"./config\":4}],4:[function(require,module,exports){\nmodule.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']\n};\n\n},{}],5:[function(require,module,exports){\n/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   * - also\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still', \"also\" ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : '';\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        var isEql = isDeep ? _.eql : SameValueZero;\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || _.eql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return _.eql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'the given combination of arguments ('\n            + objType + ' and '\n            + _.type(val).toLowerCase() + ')'\n            + ' is invalid for this assertion. '\n            + 'You can use an array, a map, an object, a set, a string, '\n            + 'or a weakset instead of a '\n            + _.type(val).toLowerCase(),\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * The alias `.exists` can be used interchangeably with `.exist`.\n   *\n   * @name exist\n   * @alias exists\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertExist () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  }\n\n  Assertion.addProperty('exist', assertExist);\n  Assertion.addProperty('exists', assertExist);\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that it’s not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n   * `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @alias greaterThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n  Assertion.addMethod('greaterThanOrEqual', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n   * `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @alias lessThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n  Assertion.addMethod('lessThanOrEqual', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toUTCString() + '..' + finish.toUTCString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name];\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && (isDeep ? _.eql(val, value) : val === value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but it’s not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      var deltaMessage = delta === undefined ? \", and a delta is required\" : \"\";\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers' + deltaMessage,\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * It can also be chained with `.contain` or `.include`, which will work with\n   * both arrays and strings:\n   *\n   *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n   *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n   *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n   *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , contains = flag(this, 'contains')\n      , isDeep = flag(this, 'deep');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    if (contains) {\n      this.assert(\n        list.some(function(possibility) { return expected.indexOf(possibility) > -1 })\n        , 'expected #{this} to contain one of #{exp}'\n        , 'expected #{this} to not contain one of #{exp}'\n        , list\n        , expected\n      );\n    } else {\n      if (isDeep) {\n        this.assert(\n          list.some(function(possibility) { return _.eql(expected, possibility) })\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , list\n          , expected\n        );\n      } else {\n        this.assert(\n          list.indexOf(expected) > -1\n          , 'expected #{this} to be one of #{exp}'\n          , 'expected #{this} to not be one of #{exp}'\n          , list\n          , expected\n        );\n      }\n    }\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n\n},{}],6:[function(require,module,exports){\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecreaseBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n\n},{}],7:[function(require,module,exports){\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n\n},{}],8:[function(require,module,exports){\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol\n          || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n\n},{}],9:[function(require,module,exports){\n/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n\n},{\"../../chai\":2,\"./addLengthGuard\":10,\"./flag\":15,\"./proxify\":31,\"./transferFlags\":33}],10:[function(require,module,exports){\nvar fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n\n},{}],11:[function(require,module,exports){\n/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n\n},{\"../../chai\":2,\"./addLengthGuard\":10,\"./flag\":15,\"./proxify\":31,\"./transferFlags\":33}],12:[function(require,module,exports){\n/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n\n},{\"../../chai\":2,\"./flag\":15,\"./isProxyEnabled\":26,\"./transferFlags\":33}],13:[function(require,module,exports){\n/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n\n},{\"./inspect\":24}],14:[function(require,module,exports){\n/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n\n},{\"./flag\":15,\"assertion-error\":34,\"type-detect\":39}],15:[function(require,module,exports){\n/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n\n},{}],16:[function(require,module,exports){\n/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n\n},{}],17:[function(require,module,exports){\n/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n\n},{}],18:[function(require,module,exports){\n/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n\n},{\"./flag\":15,\"./getActual\":16,\"./objDisplay\":27}],19:[function(require,module,exports){\nvar type = require('type-detect');\n\nvar flag = require('./flag');\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};\n\n},{\"./flag\":15,\"type-detect\":39}],20:[function(require,module,exports){\n/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n\n},{\"./getOwnEnumerablePropertySymbols\":21}],21:[function(require,module,exports){\n/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n\n},{}],22:[function(require,module,exports){\n/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n\n},{}],23:[function(require,module,exports){\n/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n\n/*!\n * getOperator method\n */\n\nexports.getOperator = require('./getOperator');\n},{\"./addChainableMethod\":9,\"./addLengthGuard\":10,\"./addMethod\":11,\"./addProperty\":12,\"./compareByInspect\":13,\"./expectTypes\":14,\"./flag\":15,\"./getActual\":16,\"./getMessage\":18,\"./getOperator\":19,\"./getOwnEnumerableProperties\":20,\"./getOwnEnumerablePropertySymbols\":21,\"./inspect\":24,\"./isNaN\":25,\"./isProxyEnabled\":26,\"./objDisplay\":27,\"./overwriteChainableMethod\":28,\"./overwriteMethod\":29,\"./overwriteProperty\":30,\"./proxify\":31,\"./test\":32,\"./transferFlags\":33,\"check-error\":35,\"deep-eql\":36,\"get-func-name\":37,\"pathval\":38,\"type-detect\":39}],24:[function(require,module,exports){\n// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      'nodeType' in object &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          var html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  var name, nameSuffix;\n\n  // Some type of object without properties can be shortcut.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      name = getName(value);\n      nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = ''\n    , array = false\n    , typedArray = false\n    , braces = ['{', '}'];\n\n  if (isTypedArray(value)) {\n    typedArray = true;\n    braces = ['[', ']'];\n  }\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    name = getName(value);\n    nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else if (typedArray) {\n    return formatTypedArray(value);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n\n    case 'symbol':\n      return ctx.stylize(value.toString(), 'symbol');\n\n    case 'bigint':\n      return ctx.stylize(value.toString() + 'n', 'bigint');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatTypedArray(value) {\n  var str = '[ ';\n\n  for (var i = 0; i < value.length; ++i) {\n    if (str.length >= config.truncateThreshold - 7) {\n      str += '...';\n      break;\n    }\n    str += value[i] + ', ';\n  }\n  str += ' ]';\n\n  // Removing trailing `, ` if the array was not truncated\n  if (str.indexOf(',  ]') !== -1) {\n    str = str.replace(',  ]', ' ]');\n  }\n\n  return str;\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name;\n  var propDescriptor = Object.getOwnPropertyDescriptor(value, key);\n  var str;\n\n  if (propDescriptor) {\n    if (propDescriptor.get) {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var length = output.reduce(function(prev, cur) {\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isTypedArray(ar) {\n  // Unfortunately there's no way to check if an object is a TypedArray\n  // We have to check if it's one of these types\n  return (typeof ar === 'object' && /\\w+Array]$/.test(objectToString(ar)));\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n},{\"../config\":4,\"./getEnumerableProperties\":17,\"./getProperties\":22,\"get-func-name\":37}],25:[function(require,module,exports){\n/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n\n},{}],26:[function(require,module,exports){\nvar config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n\n},{\"../config\":4}],27:[function(require,module,exports){\n/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n\n},{\"../config\":4,\"./inspect\":24}],28:[function(require,module,exports){\n/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n\n},{\"../../chai\":2,\"./transferFlags\":33}],29:[function(require,module,exports){\n/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n\n},{\"../../chai\":2,\"./addLengthGuard\":10,\"./flag\":15,\"./proxify\":31,\"./transferFlags\":33}],30:[function(require,module,exports){\n/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n\n},{\"../../chai\":2,\"./flag\":15,\"./isProxyEnabled\":26,\"./transferFlags\":33}],31:[function(require,module,exports){\nvar config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n\n},{\"../config\":4,\"./flag\":15,\"./getProperties\":22,\"./isProxyEnabled\":26}],32:[function(require,module,exports){\n/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n\n},{\"./flag\":15}],33:[function(require,module,exports){\n/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n\n},{}],34:[function(require,module,exports){\n/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || AssertionError;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n\n},{}],35:[function(require,module,exports){\n'use strict';\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getFunctionName(constructorFn)\n *\n * Returns the name of a function.\n * This also includes a polyfill function if `constructorFn.name` is not defined.\n *\n * @name getFunctionName\n * @param {Function} constructorFn\n * @namespace Utils\n * @api private\n */\n\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\(\\/]+)/;\nfunction getFunctionName(constructorFn) {\n  var name = '';\n  if (typeof constructorFn.name === 'undefined') {\n    // Here we run a polyfill if constructorFn.name is not defined\n    var match = String(constructorFn).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    name = constructorFn.name;\n  }\n\n  return name;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike).trim() ||\n        getFunctionName(new errorLike()); // eslint-disable-line new-cap\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n\n},{}],36:[function(require,module,exports){\n'use strict';\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function getMap(key) {\n    return key[this._key];\n  },\n  set: function setMap(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Error':\n      return leftHandOperand === rightHandOperand;\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n  if (leftHandOperand.size !== rightHandOperand.size) {\n    return false;\n  }\n  if (leftHandOperand.size === 0) {\n    return true;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    leftHandKeys.sort();\n    rightHandKeys.sort();\n    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n\n},{\"type-detect\":39}],37:[function(require,module,exports){\n'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n\n},{}],38:[function(require,module,exports){\n'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    if (\n      value === 'constructor' ||\n      value === '__proto__' ||\n      value === 'prototype'\n    ) {\n      return {};\n    }\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent:\n      parsed.length > 1 ?\n        internalGetPathValue(obj, parsed, parsed.length - 1) :\n        obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n\n},{}],39:[function(require,module,exports){\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.typeDetect = factory());\n}(this, (function () { 'use strict';\n\n/* !\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar promiseExists = typeof Promise === 'function';\n\n/* eslint-disable no-undef */\nvar globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist\n\nvar symbolExists = typeof Symbol !== 'undefined';\nvar mapExists = typeof Map !== 'undefined';\nvar setExists = typeof Set !== 'undefined';\nvar weakMapExists = typeof WeakMap !== 'undefined';\nvar weakSetExists = typeof WeakSet !== 'undefined';\nvar dataViewExists = typeof DataView !== 'undefined';\nvar symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\nvar symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\nvar setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\nvar mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\nvar setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\nvar mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\nvar arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\nvar stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\nvar stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\nvar toStringLeftSliceLength = 8;\nvar toStringRightSliceLength = -1;\n/**\n * ### typeOf (obj)\n *\n * Uses `Object.prototype.toString` to determine the type of an object,\n * normalising behaviour across engine versions & well optimised.\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nfunction typeDetect(obj) {\n  /* ! Speed optimisation\n   * Pre:\n   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)\n   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)\n   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)\n   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)\n   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)\n   * Post:\n   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)\n   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)\n   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)\n   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)\n   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)\n   */\n  var typeofObj = typeof obj;\n  if (typeofObj !== 'object') {\n    return typeofObj;\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)\n   * Post:\n   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)\n   */\n  if (obj === null) {\n    return 'null';\n  }\n\n  /* ! Spec Conformance\n   * Test: `Object.prototype.toString.call(window)``\n   *  - Node === \"[object global]\"\n   *  - Chrome === \"[object global]\"\n   *  - Firefox === \"[object Window]\"\n   *  - PhantomJS === \"[object Window]\"\n   *  - Safari === \"[object Window]\"\n   *  - IE 11 === \"[object Window]\"\n   *  - IE Edge === \"[object Window]\"\n   * Test: `Object.prototype.toString.call(this)``\n   *  - Chrome Worker === \"[object global]\"\n   *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n   *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n   */\n  if (obj === globalObject) {\n    return 'global';\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)\n   * Post:\n   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)\n   */\n  if (\n    Array.isArray(obj) &&\n    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))\n  ) {\n    return 'Array';\n  }\n\n  // Not caching existence of `window` and related properties due to potential\n  // for `window` to be unset before tests in quasi-browser environments.\n  if (typeof window === 'object' && window !== null) {\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n     * WhatWG HTML$7.7.3 - The `Location` interface\n     * Test: `Object.prototype.toString.call(window.location)``\n     *  - IE <=11 === \"[object Object]\"\n     *  - IE Edge <=13 === \"[object Object]\"\n     */\n    if (typeof window.location === 'object' && obj === window.location) {\n      return 'Location';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#document)\n     * WhatWG HTML$3.1.1 - The `Document` object\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     *       WhatWG HTML states:\n     *         > For historical reasons, Window objects must also have a\n     *         > writable, configurable, non-enumerable property named\n     *         > HTMLDocument whose value is the Document interface object.\n     * Test: `Object.prototype.toString.call(document)``\n     *  - Chrome === \"[object HTMLDocument]\"\n     *  - Firefox === \"[object HTMLDocument]\"\n     *  - Safari === \"[object HTMLDocument]\"\n     *  - IE <=10 === \"[object Document]\"\n     *  - IE 11 === \"[object HTMLDocument]\"\n     *  - IE Edge <=13 === \"[object HTMLDocument]\"\n     */\n    if (typeof window.document === 'object' && obj === window.document) {\n      return 'Document';\n    }\n\n    if (typeof window.navigator === 'object') {\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n       *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n       */\n      if (typeof window.navigator.mimeTypes === 'object' &&\n          obj === window.navigator.mimeTypes) {\n        return 'MimeTypeArray';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n       * Test: `Object.prototype.toString.call(navigator.plugins)``\n       *  - IE <=10 === \"[object MSPluginsCollection]\"\n       */\n      if (typeof window.navigator.plugins === 'object' &&\n          obj === window.navigator.plugins) {\n        return 'PluginArray';\n      }\n    }\n\n    if ((typeof window.HTMLElement === 'function' ||\n        typeof window.HTMLElement === 'object') &&\n        obj instanceof window.HTMLElement) {\n      /* ! Spec Conformance\n      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n      *  - IE <=10 === \"[object HTMLBlockElement]\"\n      */\n      if (obj.tagName === 'BLOCKQUOTE') {\n        return 'HTMLQuoteElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('td'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TD') {\n        return 'HTMLTableDataCellElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('th'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TH') {\n        return 'HTMLTableHeaderCellElement';\n      }\n    }\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)\n  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)\n  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)\n  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)\n  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)\n  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)\n  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)\n  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)\n  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)\n  * Post:\n  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)\n  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)\n  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)\n  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)\n  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)\n  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)\n  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)\n  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)\n  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)\n  */\n  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n\n  var objPrototype = Object.getPrototypeOf(obj);\n  /* ! Speed optimisation\n  * Pre:\n  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)\n  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)\n  * Post:\n  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)\n  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)\n  */\n  if (objPrototype === RegExp.prototype) {\n    return 'RegExp';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)\n  * Post:\n  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)\n  */\n  if (objPrototype === Date.prototype) {\n    return 'Date';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n   * Test: `Object.prototype.toString.call(Promise.resolve())``\n   *  - Chrome <=47 === \"[object Object]\"\n   *  - Edge <=20 === \"[object Object]\"\n   *  - Firefox 29-Latest === \"[object Promise]\"\n   *  - Safari 7.1-Latest === \"[object Promise]\"\n   */\n  if (promiseExists && objPrototype === Promise.prototype) {\n    return 'Promise';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)\n  * Post:\n  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)\n  */\n  if (setExists && objPrototype === Set.prototype) {\n    return 'Set';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)\n  * Post:\n  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)\n  */\n  if (mapExists && objPrototype === Map.prototype) {\n    return 'Map';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)\n  * Post:\n  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)\n  */\n  if (weakSetExists && objPrototype === WeakSet.prototype) {\n    return 'WeakSet';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)\n  * Post:\n  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)\n  */\n  if (weakMapExists && objPrototype === WeakMap.prototype) {\n    return 'WeakMap';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (dataViewExists && objPrototype === DataView.prototype) {\n    return 'DataView';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n   * Test: `Object.prototype.toString.call(new Map().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (mapExists && objPrototype === mapIteratorPrototype) {\n    return 'Map Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n   * Test: `Object.prototype.toString.call(new Set().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (setExists && objPrototype === setIteratorPrototype) {\n    return 'Set Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n    return 'Array Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n    return 'String Iterator';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)\n  * Post:\n  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)\n  */\n  if (objPrototype === null) {\n    return 'Object';\n  }\n\n  return Object\n    .prototype\n    .toString\n    .call(obj)\n    .slice(toStringLeftSliceLength, toStringRightSliceLength);\n}\n\nreturn typeDetect;\n\n})));\n\n},{}]},{},[1])(1)\n});\n", "\n              import chai from 'chai/chai.js';\n              var version = chai.version;\nvar AssertionError = chai.AssertionError;\nvar use = chai.use;\nvar util = chai.util;\nvar config = chai.config;\nvar Assertion = chai.Assertion;\nvar expect = chai.expect;\nvar should = chai.should;\nvar Should = chai.Should;\nvar assert = chai.assert;\n              export { version, AssertionError, use, util, config, Assertion, expect, should, Should, assert };\n              export default chai;", "// import * as sinon from \"sinon\";\nimport globalJsdom from \"global-jsdom\";\nimport { expect } from \"@esm-bundle/chai\";\n\ndescribe(\"Sample Test\", () => {\n  it(\"Should write a test\", () => {\n    expect(1).to.be.equal(1);\n  });\n});\n"],
  "mappings": "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",
  "names": ["r", "e", "n", "t", "o", "i", "f", "require", "u", "a", "Error", "code", "p", "exports", "call", "length", "1", "module", "./lib/chai", "2", "used", "version", "AssertionError", "util", "use", "fn", "indexOf", "push", "config", "assertion", "core", "expect", "should", "assert", "./chai/assertion", "./chai/config", "./chai/core/assertions", "./chai/interface/assert", "./chai/interface/expect", "./chai/interface/should", "./chai/utils", "assertion-error", "3", "_chai", "flag", "Assertion", "obj", "msg", "ssfi", "lockSsfi", "this", "proxify", "Object", "defineProperty", "get", "console", "warn", "includeStack", "set", "value", "showDiff", "addProperty", "name", "prototype", "addMethod", "addChainableMethod", "chainingBehavior", "overwriteProperty", "overwriteMethod", "overwriteChainableMethod", "expr", "negateMsg", "expected", "_actual", "ok", "test", "arguments", "getMessage", "assertionErrorObjectProperties", "actual", "getActual", "operator", "getOperator", "val", "./config", "4", "truncateThreshold", "useProxy", "proxyExcludedKeys", "5", "chai", "_", "an", "type", "toLowerCase", "article", "charAt", "SameValueZero", "b", "isNaN", "includeChainingBehavior", "include", "objType", "flagMsg", "negate", "isDeep", "descriptor", "included", "has", "isEql", "eql", "forEach", "item", "some", "props", "keys", "firstErr", "numErrs", "prop", "propAssertion", "transferFlags", "property", "err", "checkError", "compatibleConstructor", "inspect", "assertExist", "checkArguments", "assertEqual", "prevLockSsfi", "_obj", "assertEql", "assertAbove", "errorMessage", "doLength", "msgPrefix", "nType", "shouldThrow", "to", "have", "itemsCount", "size", "assertLeast", "assertBelow", "assertMost", "assertInstanceOf", "constructor", "target", "isInstanceOf", "TypeError", "getName", "assertProperty", "isNested", "isOwn", "nameType", "hasProperty", "pathInfo", "getPathInfo", "hasOwnProperty", "exists", "assertOwnProperty", "apply", "assertOwnPropertyDescriptor", "actualDescriptor", "getOwnPropertyDescriptor", "assertLengthChain", "assertLength", "assertMatch", "re", "exec", "assertKeys", "str", "keysType", "deepStr", "mixedArgsMsg", "key", "Array", "slice", "getOwnEnumerableProperties", "map", "String", "len", "any", "all", "expectedKey", "actualKey", "every", "last", "pop", "join", "sort", "compareByInspect", "assertThrows", "errorLike", "errMsgMatcher", "caughtErr", "is", "RegExp", "everyArgIsUndefined", "everyArgIsDefined", "Boolean", "errorLikeFail", "errMsgMatcherFail", "errorLikeString", "getConstructorName", "toString", "compatibleInstance", "placeholder", "compatibleMessage", "respondTo", "method", "itself", "context", "satisfy", "matcher", "result", "objDisplay", "closeTo", "delta", "Math", "abs", "isSubsetOf", "subset", "superset", "cmp", "contains", "ordered", "elem", "idx", "matchIdx", "splice", "elem2", "oneOf", "list", "be", "possibility", "assertChanges", "subject", "initial", "final", "msgObj", "assertIncreases", "assertDecreases", "assertDelta", "expression", "behavior", "realDelta", "chain", "trim", "start", "finish", "startType", "finishType", "range", "toUTCString", "failMsg", "failNegateMsg", "isExtensible", "isSealed", "isFrozen", "isFinite", "6", "express", "errmsg", "fail", "message", "isOk", "isNotOk", "not", "equal", "act", "exp", "notEqual", "strictEqual", "notStrictEqual", "deepEqual", "deepStrictEqual", "notDeepEqual", "isAbove", "abv", "above", "isAtLeast", "atlst", "least", "isBelow", "blw", "below", "isAtMost", "atmst", "most", "isTrue", "isNotTrue", "isFalse", "isNotFalse", "isNull", "isNotNull", "NaN", "isNotNaN", "exist", "notExists", "isUndefined", "undefined", "isDefined", "isFunction", "isNotFunction", "isObject", "isNotObject", "isArray", "isNotArray", "isString", "isNotString", "isNumber", "isNotNumber", "finite", "isBoolean", "isNotBoolean", "typeOf", "notTypeOf", "instanceOf", "notInstanceOf", "inc", "notInclude", "deepInclude", "deep", "notDeepInclude", "nestedInclude", "nested", "notNestedInclude", "deepNestedInclude", "notDeepNestedInclude", "ownInclude", "own", "notOwnInclude", "deepOwnInclude", "notDeepOwnInclude", "match", "notMatch", "notProperty", "propertyVal", "notPropertyVal", "deepPropertyVal", "notDeepPropertyVal", "ownProperty", "notOwnProperty", "ownPropertyVal", "notOwnPropertyVal", "deepOwnPropertyVal", "notDeepOwnPropertyVal", "nestedProperty", "notNestedProperty", "nestedPropertyVal", "notNestedPropertyVal", "deepNestedPropertyVal", "notDeepNestedPropertyVal", "lengthOf", "hasAnyKeys", "hasAllKeys", "containsAllKeys", "contain", "doesNotHaveAnyKeys", "doesNotHaveAllKeys", "hasAnyDeepKeys", "hasAllDeepKeys", "containsAllDeepKeys", "doesNotHaveAnyDeepKeys", "doesNotHaveAllDeepKeys", "throws", "assertErr", "throw", "doesNotThrow", "val2", "approximately", "sameMembers", "set1", "set2", "same", "members", "notSameMembers", "sameDeepMembers", "notSameDeepMembers", "sameOrderedMembers", "notSameOrderedMembers", "sameDeepOrderedMembers", "notSameDeepOrderedMembers", "includeMembers", "notIncludeMembers", "includeDeepMembers", "notIncludeDeepMembers", "includeOrderedMembers", "notIncludeOrderedMembers", "includeDeepOrderedMembers", "notIncludeDeepOrderedMembers", "inList", "changes", "change", "changesBy", "tmpMsg", "by", "doesNotChange", "changesButNotBy", "but", "increases", "increase", "increasesBy", "doesNotIncrease", "increasesButNotBy", "decreases", "decrease", "decreasesBy", "doesNotDecrease", "doesNotDecreaseBy", "decreasesButNotBy", "ifError", "extensible", "isNotExtensible", "sealed", "isNotSealed", "frozen", "isNotFrozen", "isEmpty", "empty", "isNotEmpty", "alias", "as", "7", "8", "loadShould", "shouldGetter", "Number", "Symbol", "BigInt", "valueOf", "shouldSetter", "enumerable", "configurable", "writable", "val1", "Throw", "errt", "errs", "Should", "9", "addLengthGuard", "canSetPrototype", "setPrototypeOf", "testFn", "excludeNames", "getOwnPropertyNames", "filter", "propDesc", "Function", "ctx", "chainableBehavior", "__methods", "chainableMethodWrapper", "newAssertion", "create", "asserterName", "pd", "../../chai", "./addLengthGuard", "./flag", "./proxify", "./transferFlags", "10", "fnLengthDesc", "assertionName", "isChainable", "11", "methodWrapper", "12", "isProxyEnabled", "getter", "propertyGetter", "./isProxyEnabled", "13", "./inspect", "14", "types", "index", "art", "type-detect", "15", "flags", "__flags", "16", "args", "17", "object", "18", "replace", "./getActual", "./objDisplay", "19", "isObjectType", "objectType", "20", "getOwnEnumerablePropertySymbols", "concat", "./getOwnEnumerablePropertySymbols", "21", "getOwnPropertySymbols", "sym", "22", "proto", "getPrototypeOf", "23", "pathval", "expectTypes", "./addChainableMethod", "./addMethod", "./addProperty", "./compareByInspect", "./expectTypes", "./getMessage", "./getOperator", "./getOwnEnumerableProperties", "./isNaN", "./overwriteChainableMethod", "./overwriteMethod", "./overwriteProperty", "./test", "check-error", "deep-eql", "get-func-name", "24", "getProperties", "getEnumerableProperties", "showHidden", "depth", "colors", "formatValue", "seen", "stylize", "isDOMElement", "HTMLElement", "nodeType", "nodeName", "recurseTimes", "ret", "primitive", "formatPrimitive", "outerHTML", "document", "xmlVersion", "XMLSerializer", "serializeToString", "ns", "container", "createElementNS", "appendChild", "cloneNode", "html", "innerHTML", "nameSuffix", "visibleKeys", "isError", "isRegExp", "isDate", "Date", "formatError", "output", "base", "array", "typedArray", "braces", "isTypedArray", "formatArray", "formatTypedArray", "formatProperty", "reduceToSingleString", "simple", "JSON", "stringify", "l", "propDescriptor", "split", "line", "substr", "reduce", "prev", "cur", "ar", "objectToString", "d", "../config", "./getEnumerableProperties", "./getProperties", "25", "26", "Proxy", "Reflect", "27", "28", "_chainingBehavior", "_method", "29", "_super", "overwritingMethodWrapper", "origLockSsfi", "30", "_get", "overwritingPropertyGetter", "31", "builtins", "stringDistanceCapped", "strA", "strB", "cap", "memo", "fill", "j", "ch", "charCodeAt", "min", "nonChainableMethodName", "proxyGetter", "suggestion", "suggestionDistance", "dist", "32", "33", "includeAll", "34", "exclude", "excludes", "excludeProps", "res", "_props", "ssf", "captureStackTrace", "stack", "toJSON", "35", "thrown", "errMatcher", "comparisonString", "functionNameMatch", "getFunctionName", "constructorFn", "constructorName", "36", "FakeMap", "_key", "random", "now", "MemoizeMap", "WeakMap", "memoizeCompare", "leftHandOperand", "rightHandOperand", "memoizeMap", "isPrimitive", "leftHandMap", "memoizeSet", "options", "comparator", "extensiveDeepEqual", "simpleResult", "simpleEqual", "memoize", "memoizeResultLeft", "memoizeResultRight", "comparatorResult", "leftHandType", "extensiveDeepEqualByType", "iterableEqual", "regexpEqual", "generatorEqual", "Uint8Array", "buffer", "entriesEqual", "objectEqual", "leftHandItems", "rightHandItems", "getGeneratorEntries", "hasIteratorFunction", "iterator", "getIteratorEntries", "iteratorError", "generator", "generatorResult", "next", "accumulator", "done", "getEnumerableKeys", "keysEqual", "leftHandKeys", "rightHandKeys", "leftHandEntries", "rightHandEntries", "37", "getFuncName", "aFunc", "38", "parsePath", "path", "mArr", "parseFloat", "internalGetPathValue", "parsed", "pathDepth", "temporaryValue", "part", "internalSetPathValue", "tempObj", "propName", "propVal", "info", "parent", "getPathValue", "setPathValue", "39", "global", "factory", "typeDetect", "promiseExists", "Promise", "globalObject", "self", "symbolExists", "mapExists", "Map", "setExists", "Set", "weakMapExists", "weakSetExists", "WeakSet", "dataViewExists", "DataView", "symbolIteratorExists", "symbolToStringTagExists", "toStringTag", "setEntriesExists", "entries", "mapEntriesExists", "setIteratorPrototype", "mapIteratorPrototype", "arrayIteratorExists", "arrayIteratorPrototype", "stringIteratorExists", "stringIteratorPrototype", "toStringLeftSliceLength", "toStringRightSliceLength", "typeofObj", "window", "location", "navigator", "mimeTypes", "plugins", "tagName", "stringTag", "objPrototype"]
}
